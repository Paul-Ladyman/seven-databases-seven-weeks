Sub Selects
==========

Rather than setting a value explicitly, sub-SELECT it using another query.

INSERT INTO events (title, starts, ends, venue_id)
	VALUES ('Lunch', '2012-02-16 12:30:00', '2012-02-16 13:30:00', (
		SELECT venue_id
		FROM venues
		WHERE name = 'My Place'
	)
);

Aggregate Functions
===================

Groups results from several rows by some common criteria

SELECT count(title)
FROM events
WHERE title LIKE '%er%';

- Aggregate function count
- LIKE search function. % is a wildcard

SELECT min(starts), max(ends)
FROM events e JOIN venues v
	ON e.venue_id = v.venue_id
WHERE v.name = 'My Place';

- min and max aggregate functions

Grouping
--------

Rather than performing an aggregate function on some column value a row at a time, use GROUP BY to group the rows and perform the function once on the group.

SELECT venue_id, count(*)
FROM events
GROUP BY venue_id

SELECT venue_id
FROM events
GROUP BY venue_id
HAVING count(*) >= 2 AND venue_id IS NOT NULL;

- Use HAVING with GROUP BY to Filter by aggregate functions (WHERE cannot do this)

SELECT venue_id
FROM events
GROUP BY venue_id

- GROUP BY can also be used without aggregate functions to select unique values in a column.

SELECT DISTINCT venue_id
FROM events

- This is often expressed using the DISTINCT shorthand instead

Windowing
---------

GROUP BY collapses groups into a single row before performing an aggregate function so its not possible to request extra fields from the original row, these are lost.

Windowing does not first collapse the group, so can be used when extra information is required. This feature however is not as common as GROUP BY in SQL stores.

SELECT title, venue_id, count(*)
OVER (PARTITION BY venue_id)
FROM events

- Can do simple filters using WHERE but does not seem to support aggregate filters with HAVING

Transactions
============

Ensures ACID compliance. Useful when modifying two tables that must remain in sync.

Individual PostGreSQL commands are implicitly transactional.

BEGIN TRANSACTION;
	DELETE FROM events;
ROLLBACK;
SELECT * FROM events;

Views
=====

Aliased queries that can be used in other queries.

CREATE VIEW holidays AS
	SELECT event_id AS holiday_id, title AS name, starts AS date
	FROM events
	WHERE title LIKE '%Day%' AND venue_id IS NULL;

- Notice adding aliases to events columns

SELECT name, to_char(date, 'Month DD, YYYY') AS date
FROM holidays
WHERE date <= '2012-04-01';

- VIEWs can be searched in other queries like a regular table using FROM.

ALTER TABLE events
ADD color text ARRAY;

CREATE OR REPLACE VIEW holidays AS
	SELECT event_id AS holiday_id, title AS name, starts AS date, color
	FROM events
	WHERE title LIKE '%Day%' AND venue_id IS NULL;

- Use CREATE OR REPLACE VIEW to update a VIEW. Unfortunately has to rewrite entire thing.

Cannot use VIEWs directly to create, update or delete data in source table. To allow this we must use RULEs.

Rules
=====

Allow the Postgres query tree to be altered with custom operations. VIEWs are RULEs.

EXPLAIN VERBOSE
	SELECT *
	FROM holidays;

- EXPLAIN VERBOSE can be used to view the execution plan for a RULE.

CREATE RULE update_holidays AS ON UPDATE TO holidays DO INSTEAD
	UPDATE events
	SET title = NEW.name,
	    starts = NEW.date,
	    color = NEW.color
	WHERE title = OLD.name;

- Capture UPDATEs to holidays and instead runs the UPDATE on events.
- NEW is a default variable that contains the incoming UPDATE values
- OLD contains the existing values, the ones we query for in WHERE

UPDATE holidays
SET color = '{"pink", "white"}'
WHERE name = 'Valentines Day';

- can now UPDATE on holidays

Pivot Tables
============

SELECT extract(year from starts) as year,
	extract(month from starts) as month,
	count(*)
FROM events
GROUP BY year, month
ORDER BY year, month

- Extract function can return subfield from date or timestamp
- Going to use pivot the row values in the month column into columns themselves

CREATE TEMPORARY TABLE month_count(month INT);
INSERT INTO month_count VALUES (1), (2), (3), (4), (5), (6), (7), (8), (9), (10), (11), (12);

- need to create a table to pivot against

SELECT * FROM crosstab(
	'SELECT extract(year from starts) as year,
		extract(month from starts) as month,
		count(*)
	FROM events
	GROUP BY year, month
	ORDER BY year, month',
	'SELECT * FROM month_count'
) AS (
	year int,
	jan int, feb int, mar int, apr int, may int, jun int, jul int, aug int, sept int, oct int, nov int, dec int
) ORDER BY year;

- Use crosstab function to create pivot table
- Have to specify column labels of pivot table using AS
