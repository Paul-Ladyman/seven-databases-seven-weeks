CREATE TABLE genres (
	name text UNIQUE,
	position integer
)

CREATE TABLE movies (
	movie_id SERIAL PRIMARY KEY,
	title text,
	genre cube
)

CREATE TABLE actors (
	actor_id SERIAL PRIMARY KEY,
	name text
)

CREATE TABLE movies_actors (
	movie_id integer REFERENCES movies NOT NULL,
	actor_id integer REFERENCES movies NOT NULL,
	UNIQUE (movie_id, actor_id)
);
CREATE INDEX movies_actors_movie_id ON movies_actors (movie_id);
CREATE INDEX movies_actors_actor_id ON movies_actors (actor_id);
CREATE INDEX movies_genres_cube ON movies USING gist (genre);

Fuzzy Searching
==============

SELECT * FROM movies WHERE title ILIKE 'stardust%';

- LIKE and ILIKE (case-insensitive) perform simple text searches
- Uses wildcards. % for any number of chars and _ for exactly one char

SELECT * FROM movies WHERE title ~* '^the.*';

- Regex searches are indicated by ~. * makes it case insensitive.
! inverts the match. The regex itself is defined by the search string.

CREATE INDEX movies_title_pattern ON movies (lower(title) text_pattern_ops);

- Can create indexes to speed up fuzzy searching. Notice we're creating an index
on the lower-cased title to correspond with our searches.
